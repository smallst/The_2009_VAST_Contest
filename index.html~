<!DOCTYPE html>
<head>
    <meta name="generator" content="text/html" charset="utf-8"/>
    <link rel="stylesheet" href="CSS/index.css" type="text/css" media="screen" />
</head>
<body>
        <div class="side_panel">
        <ul>
        <li>
        employee filter:
        <input type="text" name="down" placeholder="38" onkeypress="if(event.keyCode==13) {connectfilterd['employee'] =this.value; updatefilter('employee');}" />
        --
        <input type="text" name="up" placeholder="42" onkeypress="if(event.keyCode==13) {connectfilteru['employee'] =this.value; updatefilter('employee');}" />
            </li>
        <li>
        handlers filter:
        <input type="text" name="down" placeholder="30" onkeypress="if(event.keyCode==13) {connectfilterd['handler'] =this.value; updatefilter('handlers');}" />
        --
        <input type="text" name="up" placeholder="40" onkeypress="if(event.keyCode==13) {connectfilteru['handler'] =this.value; updatefilter('handlers');}" />
            </li>
        <li>
        Middle man filter:
        <input type="text" name="down" placeholder="1" onkeypress="if(event.keyCode==13) {connectfilterd['middle'] =this.value; updatefilter('middle');}" />
        --
        <input type="text" name="up" placeholder="5" onkeypress="if(event.keyCode==13) {connectfilteru['middle'] =this.value; updatefilter('middle');}" />
            </li>
        <li>
        Leader filter:
        <input type="text" name="down" placeholder="100" onkeypress="if(event.keyCode==13) {connectfilterd['leader'] =this.value; updatefilter('boss');}" />
        --
        <input type="text" name="up" placeholder="500" onkeypress="if(event.keyCode==13) {connectfilteru['leader'] =this.value; updatefilter('boss');}" />
            </li>
        </ul>
    </div>
 <div class="help_button">
     help
 </div>
 
        <div class="help_doc"> i'm help</div>
    <script type="text/javascript" src="../../d3/d3.js"></script>
    <script type="text/javascript" src="../../d3/d3-tip.js"></script>
    <script type="text/javascript" src="../../jQuery/jquery-2.1.4.min.js"></script>

    <script>
     var connectfilteru = {
         "employee":41,
         "handler": 40,
         "middle":  5,
         "leader":  500
     }, connectfilterd = {"employee":39,
                          "handler": 30,
                          "middle" : 1,
                          "leader" : 100};
     var identi = ["employee","handler","middle", "leader"];
     function infilter (d) {
         for(i = 0;i<4;i++)
         {
             if(d <= connectfilteru[identi[i]] && d >= connectfilterd[identi[i]])
                 return i+1;
         }
         return 0;
     }
     var tip = d3.tip()
                 .attr("class","d3-tip")
                 .html(function (d) {
                     return d.name + ","+d.index+","+d.countryname+","+d.ffilter[0];
                 });
     var shiftKey,width,height,svg,force,color;
     width = $(window).width() *0.7;
     height = $(window).height() - 20;
     var foci=[{x:~~(width*0.15),y:~~(height/2)},
               {x:~~(width*0.35),y:~~(height/2)},
               {x:~~(width*0.65),y:~~(height/2)},
               {x:~~(width*0.85),y:~~(height/2)}];
     function init(){
         
         svg = d3.select("body")
                 .attr("tabindex",1)
                 .on("keydown.brush",keyflip)
                 .on("keyup.brush",keyflip)
                 .each(function  () {
                     this.focus();
                 })
                 .append("svg")
                 .attr("width",width)
                 .attr("height",height)
                 .call(tip);
         force  = d3.layout.force()
                    .linkDistance(50)
                    .linkStrength(0)
                    .charge(function   (d) {
                        //console.log(' called');
                        return -10* Math.sqrt(d.weight);
                    }
)
//                    .chargeDistance(height* 0.1)
                    .gravity(0)
                    .size([width,height]);

         color = ["#aaaaaa",
                  "#ff0000",
                  "#9eeee1",
                  "#1012af",
                  "#23ef23"];
         nodedata.forEach(function  (d) {
             // console.log(d);
             d.x = ~~(Math.random()*width);
             d.y = ~~(Math.random()*height);
         });
         force.nodes(nodedata)
              .links(linkdata)
              .start();
         draw("employee"); 
     }
     function draw (filter) {
         console.log('draw called');
         /*   var brush = svg.append("g")
            .datum(function () { return {selected:false,previouslySelected:false}; })
            .attr("class","brush")
            .call(d3.svg.brush()
            .x(d3.scale.identity().domain([0,width]))
            .y(d3.scale.identity().domain([0,height]))
            .on("brushstart",function  (d) {
            node.each(function (p) { p.previouslySelected = shiftKey && d.selected; });
            })
            .on("brush",function  () {
            var extent = d3.event.target.extent();
            node.classed("selected",function  (d) {
            return d.selected = d.previouslySelected ^
            (extent[0][0]<= d.x && d.x<extent[1][0] &&
            extent[0][1]<=d.y && d.y< extent[1][1]);
            });
            link.classed("selected",function  (d) {
            return nodedata[d.source.index].selected || nodedata[d.target.index].selected;
            })
            })
            .on("brushend",function  () {
            d3.event.target.clear();
            d3.select(this).call(d3.event.target);
            }));*/
         nodedata.forEach(function  (d) {
             d.ffilter = [-1,false,false,false,false,false];
         });
         linkdata.forEach(function  (d) {
             var sourceinde = nodedata[d.source.index].ffilter[0]= infilter(nodedata[d.source.index].weight);
             var targetinde = nodedata[d.target.index].ffilter[0]= infilter(nodedata[d.target.index].weight);
             if(sourceinde && targetinde && Math.abs(sourceinde - targetinde) == 1)
             {
                 nodedata[d.source.index].ffilter[targetinde] = true;
                 nodedata[d.target.index].ffilter[sourceinde] = true;;
             }
         });
         nodedata.forEach(function  (d) {
             var inf = infilter(d.weight);
             if(inf && d.ffilter!== [-1,false,false,false,false,false])
             {
                 switch(inf)
                 {
                     case 1:
                     d.sele = d.ffilter[2];
                     break;
                     case 2:
                     d.sele = (d.ffilter[1] && d.ffilter[3]);
                     break;
                     case 3:
                     d.sele = (d.ffilter[2] && d.ffilter[4]);
                     break;
                     case 4:
                     d.sele = (d.ffilter[3]);
                     break;
                     default:
                     d.sele = false;
                 }
             }
             else d.sele = false;
         });
         var link = svg.append("g").attr("class","link")
                       .selectAll(".link")
                       .data(linkdata)
                       .enter().append("line")
                       .filter(function  (d) {
                           return nodedata[d.source.index].sele && nodedata[d.target.index].sele;
                       })
                       .attr("class","link")
                       .classed(filter,true)
                       .style("fill","#bbb")
                       .style("stroke-width",function (d) {
                           return d.value;
                       });
         var node = svg.append("g").attr("class","node")
                       .selectAll(".node")
                       .data(nodedata)
                       .enter().append("circle")
                       .filter(function  (d) {
                           return d.sele;
                       })
                       .attr("class","node")
                       .classed(filter,true)
                       .classed("selected",true)
                       .attr("r",function  (d) {
                           return 2+Math.sqrt(d.weight);
                       })
      
                       .style("fill",function(d){
                           return color[+d.group];})
                       .on("mouseover",function  (d) {
                           tip.show(d);
                       })
                       .on("mouseout",function  () {
                           tip.hide();
                       })
                       .on("mousedown",function  (d) {
                           if(shiftKey)
                               d3.select(this).classed("selected",function  () {
                                   d.fixed = true;
                                   link.classed("selected",function  (p) {
                                       return !nodedata[p.source.index].selected || !nodedata[p.target.index].selected;
                                   })
                                       return d.selected = !d.selected;
                               });
                           else
                           {
                               //  d.selected = true;
                               d.fixed = true;
                               node.classed("selected",function  (p) {
                                   return p.selected = false;
                               });
                               for(var ii = 0;ii<3;ii++)
                               {
                                   link.classed("selected",function  (p) {
                                       if(nodedata[p.source.index].selected &&
                                           
                                           (nodedata[p.source.index].ffilter[0]-d.ffilter[0])*
                                           (nodedata[p.target.index].ffilter[0] - nodedata[p.source.index].ffilter[0]) >=0 &&
                                           
                                           Math.abs(nodedata[p.source.index].ffilter[0] - nodedata[p.target.index].ffilter[0]) ==1 )
                                       {
                                           nodedata[p.source.index].selected = nodedata[p.target.index].selected = true;
                                           return true;
                                       } else if(nodedata[p.target.index].selected &&

                                           (nodedata[p.target.index].ffilter[0]-d.ffilter[0])*
                                           (nodedata[p.source.index].ffilter[0] - nodedata[p.target.index].ffilter[0]) >=0 &&
                                           
                                           Math.abs(nodedata[p.source.index].ffilter[0] - nodedata[p.target.index].ffilter[0] ) ==1)
                                       {
                                           nodedata[p.source.index].selected = nodedata[p.target.index].selected = true;
                                           return true;
                                       }
                                       else
                                           return false;
                                   });
                                   node.classed("selected",function  (p) {
                                       //p.fixed = p === d;
                                       return p.selected || (p.selected=p === d);
                                   });
                               }
                           }
                       })
                      /* .on("mouseup",function  (p) { 
                            force.stop()
                                   .linkDistance(function  (d) {
                                       if(nodedata[d.source.index].selected && nodedata[d.target.index].selected)
                                           return 2;
                                       else
                                           return 10;
                                   })
                                   .linkStrength(function   (d) {
                                       if(nodedata[d.source.index].selected && nodedata[d.target.index].selected )
                                           return 0.3;
                                       else
                                           return 0;
                                   })
                                   .charge(function (d) {
                                       if(d.selected )
                                           return -200;
                                       else
                                           return -30;
                                   })
                                   .start();
                       })*/
                       .call(force.drag);
         force.resume(); 
         force.on("tick",function  () {
             link.attr("x1",function (d) { return nodedata[d.source.index].x; })
                 .attr("y1",function (d) { return nodedata[d.source.index].y; })
                 .attr("x2",function (d) { return nodedata[d.target.index].x; })
                 .attr("y2",function (d) { return nodedata[d.target.index].y; });
             var k = 0.1* force.alpha();
             node.attr("cx",function  (d) {
                 if(d.fixed) return d.x;
                 var radius = Math.sqrt(d.weight);
                 d.x +=((foci[d.ffilter[0]-1]).x-d.x)*k;
                 return d.x = Math.max(radius,
                                       Math.min(width-radius,d.x));
                 /*if(d.weight <= connectfilteru['middle'])
                    {
                    d.x += (foci[1].x - d.x)*k;   
                    return d.x=Math.max(width*0.4+radius,Math.min(width*0.8-radius,d.x));
                    }
                    else if( d.weight <= connectfilteru['employee'])
                    {
                    d.x += (foci[0].x - d.x)*k;
                    return d.x=Math.max(radius,Math.min(width*0.4-radius,d.x));
                    }
                    else 
                    {
                    d.x += (foci[2].x-d.x)*k;
                    return d.x = Math.max(width * 0.8+radius,Math.min(width-radius,d.x));
                    }*/
             })
                 .attr("cy",function(d){
                     if(d.fixed ) return d.y;
                     var radius = Math.sqrt(d.weight);
                     d.y += (foci[d.ffilter[0]-1].y-d.y)*k;
                     return d.y = Math.max(radius,Math.min(height-radius,d.y));
                 });
         });
     }
     function keyflip ( ) {
         console.log('keyflip called');
         shiftKey = d3.event.shiftKey ||d3.event.metaKey;
     }
     function updatefilter(filter){
         console.log("update called");
         svg.selectAll(".node").remove();
         svg.selectAll(".link").remove();
         draw(filter);
     }
    </script>
    <script type="text/javascript" src="scripts/loaddata.js"></script>
</body>